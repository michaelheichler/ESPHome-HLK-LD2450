substitutions:
  name: mmwave-presence-2450-treppe
  friendly_name: mmwave-Presense-2450-Treppe
  wifi_ssid: !secret wifi_ssid
  wifi_password: !secret wifi_password
  illuminance_update_interval: 10s

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2024.6.0
  name_add_mac_suffix: false

esp32:
  board: esp32dev
  framework:
    type: esp-idf

wifi:
  ssid: ${wifi_ssid}
  password: ${wifi_password}

logger:

api:

improv_serial:

light:
- platform: status_led
  name: ESP32 LED
  pin: GPIO14
  internal: false
  restore_mode: ALWAYS_OFF

i2c:
- id: bus_a
  sda: 21
  scl: 22
  scan: true

external_components:
- source:
    type: git
    url: https://github.com/michaelheichler/ESPHome-HLK-LD2450
  components: [ LD2450 ]

uart:
  id: uart_bus
  rx_pin:
    number: GPIO16
    mode:
      input: true
      pullup: true
  tx_pin:
    number: GPIO17
    mode:
      input: true
      pullup: true
  baud_rate: 256000
  parity: NONE
  stop_bits: 1
  data_bits: 8

LD2450:
  id: ld2450_component
  uart_id: uart_bus
  flip_x_axis: true
  fast_off_detection: true
  max_detection_tilt_angle:
    name: "Max Tilt Angle"
    initial_value: 40°
  min_detection_tilt_angle:
    name: "Min Tilt Angle"
    initial_value: -40°
  max_detection_distance:
    name: "Max Distance"
    initial_value: 4m
  max_distance_margin: 30cm

  restart_button:
    name: "Restart Sensor"
  factory_reset_button:
    name: "Factory Reset Sensor"

  tracking_mode_switch:
    name: "Multiple Target Tracking"
  bluetooth_switch:
    name: "Sensor Bluetooth"

  baud_rate_select:
    name: "Sensor Baud Rate"

  # Added these new sensors
  occupancy:
    name: Occupancy
  target_count:
    name: Target Count

  # Added target tracking
  targets:
  - target:
      name: "Target 1"
      id: target1
      debug: true
      x_position:
        id: target1_xpos
      y_position:
        id: target1_ypos
      speed:
        id: target1_speed
      distance_resolution:
        id: target1_res
      angle:
        id: target1_angle
      distance:
        id: target1_distance
  - target:
      name: "Target 2"
      id: target2
      x_position:
        id: target2_xpos
      y_position:
        id: target2_ypos
      speed:
        id: target2_speed
      distance_resolution:
        id: target2_res
      angle:
        id: target2_angle
      distance:
        id: target2_distance
  - target:
      name: "Target 3"
      id: target3
      x_position:
        id: target3_xpos
      y_position:
        id: target3_ypos
      speed:
        id: target3_speed
      distance_resolution:
        id: target3_res
      angle:
        id: target3_angle
      distance:
        id: target3_distance
  # Enhanced zones definition
  zones:
  - zone:
      name: "Zone 1"
      margin: 0.4m
      polygon:
      - point:
          x: !lambda "return id(zone1_x1).state * 1.0;"
          y: !lambda "return id(zone1_y1).state * 1.0;"
      - point:
          x: !lambda "return id(zone1_x1).state * 1.0;"
          y: !lambda "return id(zone1_y2).state * 1.0;"
      - point:
          x: !lambda "return id(zone1_x2).state * 1.0;"
          y: !lambda "return id(zone1_y2).state * 1.0;"
      - point:
          x: !lambda "return id(zone1_x2).state * 1.0;"
          y: !lambda "return id(zone1_y1).state * 1.0;"
      occupancy:
        name: "Zone 1 Occupancy"
      target_count:
        name: "Zone 1 Target Count"
  - zone:
      name: "Zone 2"
      margin: 0.4m
      polygon:
      - point:
          x: !lambda "return id(zone2_x1).state * 1.0;"
          y: !lambda "return id(zone2_y1).state * 1.0;"
      - point:
          x: !lambda "return id(zone2_x1).state * 1.0;"
          y: !lambda "return id(zone2_y2).state * 1.0;"
      - point:
          x: !lambda "return id(zone2_x2).state * 1.0;"
          y: !lambda "return id(zone2_y2).state * 1.0;"
      - point:
          x: !lambda "return id(zone2_x2).state * 1.0;"
          y: !lambda "return id(zone2_y1).state * 1.0;"
      occupancy:
        name: "Zone 2 Occupancy"
      target_count:
        name: "Zone 2 Target Count"
  - zone:
      name: "Zone 3"
      margin: 0.4m
      polygon:
      - point:
          x: !lambda "return id(zone3_x1).state * 1.0;"
          y: !lambda "return id(zone3_y1).state * 1.0;"
      - point:
          x: !lambda "return id(zone3_x1).state * 1.0;"
          y: !lambda "return id(zone3_y2).state * 1.0;"
      - point:
          x: !lambda "return id(zone3_x2).state * 1.0;"
          y: !lambda "return id(zone3_y2).state * 1.0;"
      - point:
          x: !lambda "return id(zone3_x2).state * 1.0;"
          y: !lambda "return id(zone3_y1).state * 1.0;"
      occupancy:
        name: "Zone 3 Occupancy"
      target_count:
        name: "Zone 3 Target Count"

number:
- platform: template
  name: "Zone 1 X1"
  id: zone1_x1
  min_value: 0
  max_value: 10
  step: 0.1
  initial_value: 0
  optimistic: true
  restore_value: true
  unit_of_measurement: "m"
  set_action:
    then:
    - lambda: |-
        id(zone1_x1).state = x;
- platform: template
  name: "Zone 1 Y1"
  id: zone1_y1
  min_value: 0
  max_value: 10
  step: 0.1
  initial_value: 0
  optimistic: true
  restore_value: true
  unit_of_measurement: "m"
  set_action:
    then:
    - lambda: |-
        id(zone1_y1).state = x;
- platform: template
  name: "Zone 1 X2"
  id: zone1_x2
  min_value: 0
  max_value: 10
  step: 0.1
  initial_value: 2
  optimistic: true
  restore_value: true
  unit_of_measurement: "m"
  set_action:
    then:
    - lambda: |-
        id(zone1_x2).state = x;
- platform: template
  name: "Zone 1 Y2"
  id: zone1_y2
  min_value: 0
  max_value: 10
  step: 0.1
  initial_value: 2
  optimistic: true
  restore_value: true
  unit_of_measurement: "m"
  set_action:
    then:
    - lambda: |-
        id(zone1_y2).state = x;
- platform: template
  name: "Zone 2 X1"
  id: zone2_x1
  min_value: 0
  max_value: 10
  step: 0.1
  initial_value: 2
  optimistic: true
  restore_value: true
  unit_of_measurement: "m"
  set_action:
    then:
    - lambda: |-
        id(zone2_x1).state = x;
- platform: template
  name: "Zone 2 Y1"
  id: zone2_y1
  min_value: 0
  max_value: 10
  step: 0.1
  initial_value: 0
  optimistic: true
  restore_value: true
  unit_of_measurement: "m"
  set_action:
    then:
    - lambda: |-
        id(zone2_y1).state = x;
- platform: template
  name: "Zone 2 X2"
  id: zone2_x2
  min_value: 0
  max_value: 10
  step: 0.1
  initial_value: 4
  optimistic: true
  restore_value: true
  unit_of_measurement: "m"
  set_action:
    then:
    - lambda: |-
        id(zone2_x2).state = x;
- platform: template
  name: "Zone 2 Y2"
  id: zone2_y2
  min_value: 0
  max_value: 10
  step: 0.1
  initial_value: 2
  optimistic: true
  restore_value: true
  unit_of_measurement: "m"
  set_action:
    then:
    - lambda: |-
        id(zone2_y2).state = x;
- platform: template
  name: "Zone 3 X1"
  id: zone3_x1
  min_value: 0
  max_value: 10
  step: 0.1
  initial_value: 0
  optimistic: true
  restore_value: true
  unit_of_measurement: "m"
  set_action:
    then:
    - lambda: |-
        id(zone3_x1).state = x;
- platform: template
  name: "Zone 3 Y1"
  id: zone3_y1
  min_value: 0
  max_value: 10
  step: 0.1
  initial_value: 0
  optimistic: true
  restore_value: true
  unit_of_measurement: "m"
  set_action:
    then:
    - lambda: |-
        id(zone3_y1).state = x;
- platform: template
  name: "Zone 3 X2"
  id: zone3_x2
  min_value: 0
  max_value: 10
  step: 0.1
  initial_value: 4
  optimistic: true
  restore_value: true
  unit_of_measurement: "m"
  set_action:
    then:
    - lambda: |-
        id(zone3_x2).state = x;
- platform: template
  name: "Zone 3 Y2"
  id: zone3_y2
  min_value: 0
  max_value: 10
  step: 0.1
  initial_value: 2
  optimistic: true
  restore_value: true
  unit_of_measurement: "m"
  set_action:
    then:
    - lambda: |-
        id(zone3_y2).state = x;
