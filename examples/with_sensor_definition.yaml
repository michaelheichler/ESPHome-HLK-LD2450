substitutions:
  name: mmwave-presence-2450-treppe
  friendly_name: mmwave-Presense-2450-Treppe
  wifi_ssid: !secret wifi_ssid
  wifi_password: !secret wifi_password
  illuminance_update_interval: 10s

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2024.6.0
  name_add_mac_suffix: false

esp32:
  board: esp32dev
  framework:
    type: esp-idf

wifi:
  ssid: ${wifi_ssid}
  password: ${wifi_password}

logger:

api:
  services:
  - service: set_zone
    variables:
      zone_id: int
      points: "std::vector<std::pair<float, float>>"
    then:
    - lambda: |-
        id(ld2450_component).set_zone(zone_id, points);

improv_serial:

light:
- platform: status_led
  name: ESP32 LED
  pin: GPIO14
  internal: false
  restore_mode: ALWAYS_OFF

i2c:
- id: bus_a
  sda: 21
  scl: 22
  scan: true

external_components:
- source:
    type: git
    url: https://github.com/michaelheichler/ESPHome-HLK-LD2450
  components: [ LD2450 ]

uart:
  id: uart_bus
  rx_pin:
    number: GPIO16
    mode:
      input: true
      pullup: true
  tx_pin:
    number: GPIO17
    mode:
      input: true
      pullup: true
  baud_rate: 256000
  parity: NONE
  stop_bits: 1
  data_bits: 8

LD2450:
  id: ld2450_component
  uart_id: uart_bus
  flip_x_axis: true
  fast_off_detection: true
  max_detection_tilt_angle:
    name: "Max Tilt Angle"
    initial_value: 40°
  min_detection_tilt_angle:
    name: "Min Tilt Angle"
    initial_value: -40°
  max_detection_distance:
    name: "Max Distance"
    initial_value: 4m
  max_distance_margin: 30cm

  restart_button:
    name: "Restart Sensor"
  factory_reset_button:
    name: "Factory Reset Sensor"

  tracking_mode_switch:
    name: "Multiple Target Tracking"
  bluetooth_switch:
    name: "Sensor Bluetooth"

  baud_rate_select:
    name: "Sensor Baud Rate"

number:
- platform: template
  name: "Zone 1 X1"
  id: zone1_x1
  unit_of_measurement: "m"
  min_value: 0
  max_value: 10
  step: 0.1
  optimistic: true
  restore_value: true
  initial_value: 0
- platform: template
  name: "Zone 1 Y1"
  id: zone1_y1
  unit_of_measurement: "m"
  min_value: 0
  max_value: 10
  step: 0.1
  optimistic: true
  restore_value: true
  initial_value: 0
- platform: template
  name: "Zone 1 X2"
  id: zone1_x2
  unit_of_measurement: "m"
  min_value: 0
  max_value: 10
  step: 0.1
  optimistic: true
  restore_value: true
  initial_value: 2
- platform: template
  name: "Zone 1 Y2"
  id: zone1_y2
  unit_of_measurement: "m"
  min_value: 0
  max_value: 10
  step: 0.1
  optimistic: true
  restore_value: true
  initial_value: 2
- platform: template
  name: "Zone 2 X1"
  id: zone2_x1
  unit_of_measurement: "m"
  min_value: 0
  max_value: 10
  step: 0.1
  optimistic: true
  restore_value: true
  initial_value: 2
- platform: template
  name: "Zone 2 Y1"
  id: zone2_y1
  unit_of_measurement: "m"
  min_value: 0
  max_value: 10
  step: 0.1
  optimistic: true
  restore_value: true
  initial_value: 0
- platform: template
  name: "Zone 2 X2"
  id: zone2_x2
  unit_of_measurement: "m"
  min_value: 0
  max_value: 10
  step: 0.1
  optimistic: true
  restore_value: true
  initial_value: 4
- platform: template
  name: "Zone 2 Y2"
  id: zone2_y2
  unit_of_measurement: "m"
  min_value: 0
  max_value: 10
  step: 0.1
  optimistic: true
  restore_value: true
  initial_value: 2

interval:
- interval: 10s
  then:
  - lambda: |-
      std::vector<std::pair<float, float>> zone1_polygon = {
        {id(zone1_x1).state, id(zone1_y1).state},
        {id(zone1_x2).state, id(zone1_y1).state},
        {id(zone1_x2).state, id(zone1_y2).state},
        {id(zone1_x1).state, id(zone1_y2).state},
      };
      id(ld2450_component).set_zone(0, zone1_polygon);

      std::vector<std::pair<float, float>> zone2_polygon = {
        {id(zone2_x1).state, id(zone2_y1).state},
        {id(zone2_x2).state, id(zone2_y1).state},
        {id(zone2_x2).state, id(zone2_y2).state},
        {id(zone2_x1).state, id(zone2_y2).state},
      };
      id(ld2450_component).set_zone(1, zone2_polygon);
